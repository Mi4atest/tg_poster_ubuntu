@router.callback_query(PostCreation.waiting_for_photos, F.data == "skip")
async def skip_photos(callback: CallbackQuery, state: FSMContext):
    """Skip adding photos."""
    await callback.message.edit_text(
        "üìπ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–¥–æ 50 –ú–ë, —Ñ–æ—Ä–º–∞—Ç .mov).\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ –∑–∞ —Ä–∞–∑.",
        reply_markup=get_skip_back_keyboard()
    )

    # Initialize empty videos list
    await state.update_data(videos=[])

    # Move to next state
    await state.set_state(PostCreation.waiting_for_videos)

    await callback.answer()

@router.callback_query(PostCreation.waiting_for_photos, F.data == "back")
async def back_to_text(callback: CallbackQuery, state: FSMContext):
    """Go back to entering text."""
    await callback.message.edit_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞."
    )

    # Move back to previous state
    await state.set_state(PostCreation.waiting_for_text)

    await callback.answer()

@router.message(PostCreation.waiting_for_photos, F.photo | F.media_group_id)
async def process_photo(message: Message, state: FSMContext):
    """Process a photo for the post."""
    # Get current data
    data = await state.get_data()
    photos = data.get("photos", [])
    status_message_id = data.get("status_message_id")
    media_group_id = message.media_group_id

    # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if media_group_id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –≥—Ä—É–ø–ø—É
        processed_groups = data.get("processed_media_groups", [])
        if media_group_id in processed_groups:
            # –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë ID –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        if "current_media_group" not in data or data["current_media_group"] != media_group_id:
            await state.update_data(current_media_group=media_group_id)
            print(f"Processing new media group: {media_group_id}")

    # Check if we already have 10 photos
    if len(photos) >= 10:
        if not status_message_id:
            status_message_obj = await message.answer(
                "‚ùå –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10).\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–∏–¥–µ–æ, –∏–ª–∏ '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞.",
                reply_markup=get_skip_back_keyboard()
            )
            await state.update_data(status_message_id=status_message_obj.message_id)
        return

    # Get the largest photo (best quality)
    photo = message.photo[-1]

    # Add photo file_id to list if it's not already there
    if photo.file_id not in photos:
        photos.append(photo.file_id)
        # Update state
        await state.update_data(photos=photos)
        print(f"Added photo {len(photos)}/{10}, file_id: {photo.file_id[:15]}...")

    # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    # —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –≤—Å–µ–º —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è
    if media_group_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        await state.update_data(last_media_update=datetime.now().timestamp())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        last_update = data.get("last_media_update", 0)
        current_time = datetime.now().timestamp()

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if current_time - last_update < 1:
            return

    # Update or send status message
    status_text = (
        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)}/10 —Ñ–æ—Ç–æ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    )

    if status_message_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_message_id,
                text=status_text,
                reply_markup=get_skip_back_keyboard()
            )
        except Exception as e:
            # If message can't be edited (too old or deleted), send a new one
            print(f"Error editing message: {str(e)}")
            status_message_obj = await message.answer(
                status_text,
                reply_markup=get_skip_back_keyboard()
            )
            await state.update_data(status_message_id=status_message_obj.message_id)
    else:
        status_message_obj = await message.answer(
            status_text,
            reply_markup=get_skip_back_keyboard()
        )
        await state.update_data(status_message_id=status_message_obj.message_id)

    # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, –æ—Ç–º–µ—á–∞–µ–º –µ—ë –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if media_group_id:
        processed_groups = data.get("processed_media_groups", [])
        if media_group_id not in processed_groups:
            processed_groups.append(media_group_id)
            await state.update_data(processed_media_groups=processed_groups)
            print(f"Marked media group {media_group_id} as processed")
