from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
from datetime import datetime

from app.bot.keyboards.main_keyboard import get_main_keyboard, get_skip_back_keyboard
from app.config.settings import API_HOST, API_PORT

router = Router()

# Define states for post creation
class PostCreation(StatesGroup):
    waiting_for_text = State()
    waiting_for_photos = State()
    waiting_for_videos = State()
    confirmation = State()

# API client function
async def create_post_api(text, photos, videos):
    """Send post data to API."""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://{API_HOST}:{API_PORT}/api/posts/"
            data = {
                "text": text,
                "photos": photos if photos else [],
                "videos": videos if videos else []
            }
            print(f"Creating post via {url} with {len(photos)} photos and {len(videos)} videos")

            try:
                async with session.post(url, json=data) as response:
                    print(f"API response status: {response.status}")

                    if response.status == 201:
                        result = await response.json()
                        print(f"Post created successfully with ID: {result.get('id')}")
                        return result
                    else:
                        error_text = await response.text()
                        print(f"API Error: {response.status} - {error_text}")
                        return None
            except Exception as e:
                print(f"Error during API request: {str(e)}")
                return None
    except Exception as e:
        print(f"Error creating post: {str(e)}")
        return None

@router.message(PostCreation.waiting_for_text, F.text)
async def process_post_text(message: Message, state: FSMContext):
    """Process the post text."""
    if not message.text or len(message.text.strip()) == 0:
        await message.reply("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞.")
        return

    # Save text to state
    await state.update_data(text=message.text)

    # Ask for photos
    await message.reply(
        "‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "üì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ (–æ—Ç 1 –¥–æ 10 —à—Ç).\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=get_skip_back_keyboard()
    )

    # Initialize empty photos list
    await state.update_data(photos=[])

    # Move to next state
    await state.set_state(PostCreation.waiting_for_photos)

@router.message(PostCreation.waiting_for_text, F.photo | F.media_group_id)
async def process_text_with_photo(message: Message, state: FSMContext):
    """Process a message with text and photo."""
    # Save text to state if present
    if message.caption and len(message.caption.strip()) > 0:
        await state.update_data(text=message.caption)
    else:
        # If no caption, ask for text
        await message.reply("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞.")
        return

    # Initialize photos list
    photos = []
    media_group_id = message.media_group_id

    # Get the largest photo (best quality)
    photo = message.photo[-1]
    photos.append(photo.file_id)

    # Save photos to state
    await state.update_data(photos=photos)

    # If it's a media group, we'll handle additional photos in the process_photo handler
    if media_group_id:
        await state.update_data(
            current_media_group=media_group_id,
            processed_media_groups=[],
            status_message_id=None
        )

        # Send status message
        status_message_obj = await message.reply(
            f"‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)}/10 —Ñ–æ—Ç–æ\n\n"
            f"–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã...",
            reply_markup=get_skip_back_keyboard()
        )
        await state.update_data(status_message_id=status_message_obj.message_id)
    else:
        # Send confirmation message
        await message.reply(
            f"‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)}/10 —Ñ–æ—Ç–æ\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=get_skip_back_keyboard()
        )

    # Move to photos state to allow adding more photos
    await state.set_state(PostCreation.waiting_for_photos)

@router.message(PostCreation.waiting_for_text, F.video)
async def process_text_with_video(message: Message, state: FSMContext):
    """Process a message with text and video."""
    # Save text to state if present
    if message.caption and len(message.caption.strip()) > 0:
        await state.update_data(text=message.caption)
    else:
        # If no caption, ask for text
        await message.reply("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞.")
        return

    # Initialize videos list
    videos = []

    # Add video to list
    video = message.video
    videos.append(video.file_id)

    # Save videos to state
    await state.update_data(videos=videos)

    # Send confirmation message
    await message.reply(
        f"‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ: {video.file_size / (1024*1024):.1f} –ú–ë\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=get_skip_back_keyboard()
    )

    # Initialize empty photos list
    await state.update_data(photos=[])

    # Move to photos state to allow adding photos
    await state.set_state(PostCreation.waiting_for_photos)

@router.callback_query(PostCreation.waiting_for_photos, F.data == "skip")
async def skip_photos(callback: CallbackQuery, state: FSMContext):
    """Skip adding photos."""
    await callback.message.edit_text(
        "üìπ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–¥–æ 50 –ú–ë, —Ñ–æ—Ä–º–∞—Ç .mov).\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ –∑–∞ —Ä–∞–∑.",
        reply_markup=get_skip_back_keyboard()
    )

    # Initialize empty videos list
    await state.update_data(videos=[])

    # Move to next state
    await state.set_state(PostCreation.waiting_for_videos)

    await callback.answer()

@router.callback_query(PostCreation.waiting_for_photos, F.data == "back")
async def back_to_text(callback: CallbackQuery, state: FSMContext):
    """Go back to entering text."""
    await callback.message.edit_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞."
    )

    # Move back to previous state
    await state.set_state(PostCreation.waiting_for_text)

    await callback.answer()

@router.message(PostCreation.waiting_for_photos, F.photo | F.media_group_id)
async def process_photo(message: Message, state: FSMContext):
    """Process a photo for the post."""
    # Get current data
    data = await state.get_data()
    photos = data.get("photos", [])
    status_message_id = data.get("status_message_id")
    media_group_id = message.media_group_id

    # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if media_group_id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –≥—Ä—É–ø–ø—É
        processed_groups = data.get("processed_media_groups", [])
        if media_group_id in processed_groups:
            # –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë ID –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        if "current_media_group" not in data or data["current_media_group"] != media_group_id:
            await state.update_data(current_media_group=media_group_id)
            print(f"Processing new media group: {media_group_id}")

    # Check if we already have 10 photos
    if len(photos) >= 10:
        if not status_message_id:
            status_message_obj = await message.answer(
                "‚ùå –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10).\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–∏–¥–µ–æ, –∏–ª–∏ '–ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞.",
                reply_markup=get_skip_back_keyboard()
            )
            await state.update_data(status_message_id=status_message_obj.message_id)
        return

    # Get the largest photo (best quality)
    photo = message.photo[-1]

    # Add photo file_id to list if it's not already there
    if photo.file_id not in photos:
        photos.append(photo.file_id)
        # Update state
        await state.update_data(photos=photos)
        print(f"Added photo {len(photos)}/{10}, file_id: {photo.file_id[:15]}...")

    # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    # —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –≤—Å–µ–º —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è
    if media_group_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        await state.update_data(last_media_update=datetime.now().timestamp())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        last_update = data.get("last_media_update", 0)
        current_time = datetime.now().timestamp()

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if current_time - last_update < 1:
            return

    # Update or send status message
    status_text = (
        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)}/10 —Ñ–æ—Ç–æ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    )

    if status_message_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_message_id,
                text=status_text,
                reply_markup=get_skip_back_keyboard()
            )
        except Exception as e:
            # If message can't be edited (too old or deleted), send a new one
            print(f"Error editing message: {str(e)}")
            status_message_obj = await message.answer(
                status_text,
                reply_markup=get_skip_back_keyboard()
            )
            await state.update_data(status_message_id=status_message_obj.message_id)
    else:
        status_message_obj = await message.answer(
            status_text,
            reply_markup=get_skip_back_keyboard()
        )
        await state.update_data(status_message_id=status_message_obj.message_id)

    # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, –æ—Ç–º–µ—á–∞–µ–º –µ—ë –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if media_group_id:
        processed_groups = data.get("processed_media_groups", [])
        if media_group_id not in processed_groups:
            processed_groups.append(media_group_id)
            await state.update_data(processed_media_groups=processed_groups)
            print(f"Marked media group {media_group_id} as processed")

@router.callback_query(PostCreation.waiting_for_videos, F.data == "skip")
async def skip_videos(callback: CallbackQuery, state: FSMContext):
    """Skip adding videos and proceed to create post."""
    # Get all data
    data = await state.get_data()
    text = data.get("text", "")
    photos = data.get("photos", [])
    videos = data.get("videos", [])

    # Send data to API
    await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞—é –ø–æ—Å—Ç...")

    try:
        post = await create_post_api(text, photos, videos)

        if post:
            # Format success message
            photo_count = len(photos)
            video_count = len(videos)
            post_name = post.get("name", "")

            success_text = f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            success_text += f"üìù {post_name}\n\n"

            if photo_count > 0:
                success_text += f"üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}\n"

            if video_count > 0:
                success_text += f"üìπ –í–∏–¥–µ–æ: {video_count}\n"

            success_text += "\n–ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö."

            # Create keyboard for post actions
            buttons = [
                [InlineKeyboardButton(text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–º", callback_data="pending_posts")],
                [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback.message.edit_text(success_text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard()
        )

    # Reset state
    await state.clear()

    await callback.answer()

@router.callback_query(PostCreation.waiting_for_videos, F.data == "back")
async def back_to_photos(callback: CallbackQuery, state: FSMContext):
    """Go back to adding photos."""
    await callback.message.edit_text(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ (–æ—Ç 1 –¥–æ 10 —à—Ç).\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞ —Ä–∞–∑. –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=get_skip_back_keyboard()
    )

    # Move back to previous state
    await state.set_state(PostCreation.waiting_for_photos)

    await callback.answer()

@router.message(PostCreation.waiting_for_videos, F.video)
async def process_video(message: Message, state: FSMContext):
    """Process a video for the post."""
    # Get current data
    data = await state.get_data()
    videos = data.get("videos", [])
    status_message_id = data.get("status_message_id")

    # Check file size (Telegram already limits to 50MB)
    video = message.video

    # Add video file_id to list
    videos.append(video.file_id)

    # Update state
    await state.update_data(videos=videos)

    # Update or send status message
    status_text = (
        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ: {video.file_size / (1024*1024):.1f} –ú–ë\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
    )

    if status_message_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_message_id,
                text=status_text,
                reply_markup=get_skip_back_keyboard()
            )
        except Exception as e:
            # If message can't be edited (too old or deleted), send a new one
            print(f"Error editing message: {str(e)}")
            status_message_obj = await message.answer(
                status_text,
                reply_markup=get_skip_back_keyboard()
            )
            await state.update_data(status_message_id=status_message_obj.message_id)
    else:
        status_message_obj = await message.answer(
            status_text,
            reply_markup=get_skip_back_keyboard()
        )
        await state.update_data(status_message_id=status_message_obj.message_id)

@router.callback_query(F.data == "pending_posts")
async def pending_posts_callback(callback: CallbackQuery, state: FSMContext):
    """Handle the 'Pending Posts' button."""
    # Clear any active state
    await state.clear()

    await callback.message.edit_text(
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )

    # Fetch posts from API and display them
    from app.bot.handlers.post_management import show_pending_posts
    try:
        await show_pending_posts(callback.message)
    except Exception as e:
        print(f"Error showing pending posts: {str(e)}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}",
            reply_markup=get_main_keyboard()
        )

    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """Return to the main menu."""
    # Clear any active state
    await state.clear()

    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ —Å–æ—Ü—Å–µ—Ç–∏!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏:",
        reply_markup=get_main_keyboard()
    )

    await callback.answer()
