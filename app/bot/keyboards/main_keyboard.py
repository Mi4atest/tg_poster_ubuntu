from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_main_keyboard() -> InlineKeyboardMarkup:
    """Create the main keyboard for the bot."""
    buttons = [
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post")],
        [InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="pending_posts")],
        [InlineKeyboardButton(text="üìÅ –ê—Ä—Ö–∏–≤", callback_data="archive_posts")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_post_actions_keyboard(from_archive=False) -> InlineKeyboardMarkup:
    """Create the keyboard for post actions.

    Args:
        from_archive: Whether the post is being viewed from the archive
    """
    buttons = [
        # Social media buttons for posts
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ –≤—Å–µ —Å–æ—Ü—Å–µ—Ç–∏", callback_data="publish_all")],
        [
            InlineKeyboardButton(text="üì± –≤ –í–ö", callback_data="publish_vk"),
            InlineKeyboardButton(text="üì¢ –≤ –¢–ì", callback_data="publish_telegram"),
            InlineKeyboardButton(text="üì∏ –≤ IG", callback_data="publish_instagram")
        ],
        # Social media buttons for stories (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –±–µ–∑ –ø–æ–¥–∫–Ω–æ–ø–æ–∫)
        [InlineKeyboardButton(text="üì± –°—Ç–æ—Ä–∏—Å", callback_data="stories_menu")],
        # Edit and delete buttons
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data="delete")
        ],
        # Back button - different depending on context
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä—Ö–∏–≤—É" if from_archive else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç–∞–º",
            callback_data="back_to_archive" if from_archive else "back_to_posts"
        )]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_skip_back_keyboard() -> InlineKeyboardMarkup:
    """Create a keyboard with skip and back buttons."""
    buttons = [
        [
            InlineKeyboardButton(text="‚è≠Ô∏è –î–∞–ª–µ–µ", callback_data="skip"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_media_management_keyboard() -> InlineKeyboardMarkup:
    """Create a keyboard for managing photos and videos."""
    buttons = [
        [
            InlineKeyboardButton(text="üì∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="manage_photos"),
            InlineKeyboardButton(text="üìπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ", callback_data="manage_videos")
        ],
        [
            InlineKeyboardButton(text="‚è≠Ô∏è –î–∞–ª–µ–µ", callback_data="skip"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_photo_management_keyboard(photos) -> InlineKeyboardMarkup:
    """Create a keyboard for managing photos."""
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if photos:
        for i, _ in enumerate(photos, 1):
            buttons.append([
                InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ #{i}", callback_data=f"delete_photo_{i-1}")
            ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photos"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_media_management")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_video_management_keyboard(videos) -> InlineKeyboardMarkup:
    """Create a keyboard for managing videos."""
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if videos:
        for i, _ in enumerate(videos, 1):
            buttons.append([
                InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ #{i}", callback_data=f"delete_video_{i-1}")
            ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="add_videos"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_media_management")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """Create a confirmation keyboard with Yes/No buttons."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_no")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_skip_back_keyboard() -> InlineKeyboardMarkup:
    """Create a keyboard with Next and Back buttons."""
    buttons = [
        [
            InlineKeyboardButton(text="‚è≠Ô∏è –î–∞–ª–µ–µ", callback_data="skip"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
