import re
from typing import Tuple, Optional

def extract_model_and_price(text: str) -> Tuple[Optional[str], Optional[str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞.
    
    –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤:
    - üî•iPhone 15 128Gb Black 3486 (–ë/—É, –û—Ä–∏–≥–∏–Ω–∞–ª)üî•\n\n–¶–µ–Ω–∞: 49900—Ä.\n\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω 17.01.2025\n–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª...
    - üî•Apple Watch Series SE (2nd Gen), 44mm Midnight (–ë/—É, –û—Ä–∏–≥–∏–Ω–∞–ª)üî•\n\n–¶–µ–Ω–∞: 19900—Ä.\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: 9/10...
    - üî• –ù–æ–≤—ã–µ –ø–ª–∞–Ω—à–µ—Ç—ã iPad 10üî• \n\niPad 10th Gen (2022) 64Gb Wi-Fi\n–¶–µ–Ω–∞: 39900 —Ä—É–±.\n\n–í –Ω–∞–ª–∏—á–∏–∏...
    
    Args:
        text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        
    Returns:
        Tuple[Optional[str], Optional[str]]: (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, —Ü–µ–Ω–∞)
    """
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    model_name = None
    
    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    lines = text.strip().split('\n')
    if lines:
        first_line = lines[0].strip()
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        first_line = re.sub(r'[üî•üëç‚≠êÔ∏èüì±üì≤üíØüéÅüéÑüéÄ]+', '', first_line).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        if any(keyword in first_line.lower() for keyword in ['iphone', 'ipad', 'macbook', 'apple watch', 'airpods']):
            # –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            model_name = re.sub(r'\s*\([^)]*\)\s*$', '', first_line)
            # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            model_name = re.sub(r'üî•$', '', model_name).strip()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
    if not model_name:
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model_patterns = [
            r'(iPhone\s+\d+\s+(?:Pro|Pro Max|Plus|mini)?\s+\d+Gb\s+\w+)',
            r'(iPad\s+(?:Pro|Air|mini)?\s+\d+(?:th Gen)?\s+\d+Gb)',
            r'(MacBook\s+(?:Pro|Air)\s+\d+(?:\.\d+)?(?:\s+inch)?)',
            r'(Apple\s+Watch\s+Series\s+\w+(?:\s+\d+mm)?)',
            r'(AirPods\s+(?:Pro|Max)?(?:\s+\d+)?)'
        ]
        
        for pattern in model_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                model_name = match.group(1)
                break
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
    price = None
    
    # –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¶–µ–Ω–∞: XXXXX" –∏–ª–∏ "XXXXX —Ä—É–±" –∏–ª–∏ "XXXXX —Ä."
    price_patterns = [
        r'–¶–µ–Ω–∞:?\s*(\d+[\s\.,]?\d*)\s*(?:—Ä—É–±|—Ä|‚ÇΩ|RUB)',
        r'(\d+[\s\.,]?\d*)\s*(?:—Ä—É–±|—Ä|‚ÇΩ|RUB)',
        r'—Å—Ç–æ–∏–º–æ—Å—Ç—å:?\s*(\d+[\s\.,]?\d*)\s*(?:—Ä—É–±|—Ä|‚ÇΩ|RUB)',
        r'—Ü–µ–Ω–∞\s*-\s*(\d+[\s\.,]?\d*)\s*(?:—Ä—É–±|—Ä|‚ÇΩ|RUB)'
    ]
    
    for pattern in price_patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            price = match.group(1).replace(' ', '').replace(',', '.')
            # –î–æ–±–∞–≤–ª—è–µ–º "‚ÇΩ" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not any(currency in price for currency in ['—Ä—É–±', '—Ä', '‚ÇΩ', 'RUB']):
                price = f"{price}‚ÇΩ"
            break
    
    return model_name, price
